# -*- coding: utf-8 -*-
"""LinearvsPolynomial.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CyA32QlUqeo_rQB1JgBBHhztlGAtCaSH
"""

import numpy as np
import pandas as pd

data = pd.read_csv('path')

data.head()

data.info()

data.describe()

data['model_year'] = pd.to_datetime(data['model_year'],format='%y')

#Fill missing values
data['horsepower'] = data['horsepower'].astype(float)
data['horsepower'].fillna(method = 'ffill',inplace = True)

import seaborn as sns

sns.pairplot(data)

corr = data.corr()

sns.heatmap(corr,annot = True, cmap = 'coolwarm')

data.columns

from sklearn.model_selection import train_test_split

X = data[['horsepower','weight']]
y = data['mpg']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.7, random_state=2529)

X_train.shape, X_test.shape, y_train.shape, y_test.shape

from statsmodels.stats.outliers_influence import variance_inflation_factor
vif = pd.DataFrame()
vif["VIF Factor"] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]
vif["VIF Features"] = X.columns
vif.round(1)

from sklearn.preprocessing import StandardScaler

ss = StandardScaler()
X_train = ss.fit_transform(X_train)
X_test = ss.fit_transform(X_test)

from sklearn.linear_model import LinearRegression

lr = LinearRegression()

lr.fit(X_train,y_train)

lr.intercept_

lr.coef_

y_pred = lr.predict(X_test)

from sklearn.metrics import mean_absolute_percentage_error, r2_score

mean_absolute_percentage_error(y_test,y_pred)

r2_score(y_test,y_pred)

import statsmodels.api as sm
X = sm.add_constant(X)
model = sm.OLS(y,X)
results = model.fit()
print(results.summary())

from sklearn.preprocessing import PolynomialFeatures

poly = PolynomialFeatures(degree=2)

X_train2 = poly.fit_transform(X_train)

X_train2 = pd.DataFrame(X_train2, columns = ['bais','horsepower','weight','square of horsepower','horsepower*weight','square of weight'])

X_train2.head()

X_test2 = poly.fit_transform(X_test)

X_test2 = pd.DataFrame(X_test2, columns = ['bais','horsepower','weight','square of horsepower','horsepower*weight','square of weight'])

lr.fit(X_train2,y_train)

lr.intercept_

lr.coef_

pred2 = lr.predict(X_test2)

mean_absolute_percentage_error(y_test,pred2)

r2_score(y_test,pred2)

